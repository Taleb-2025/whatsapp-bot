require('dotenv').config();
const express = require('express');
const qrcode = require('qrcode');
const { default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion, DisconnectReason } = require('@whiskeysockets/baileys');
const P = require('pino');
const fs = require('fs');
const path = require('path');
const { Boom } = require('@hapi/boom');

const app = express();
const PORT = process.env.PORT || 3000;
const AUTH_FOLDER = './auth_info_diginetz';

if (!fs.existsSync(AUTH_FOLDER)) {
    fs.mkdirSync(AUTH_FOLDER);
}

let qrCodeData = null;

// ุฑุงุจุท ูุณุญ QR Code ูู ุงููุชุตูุญ ูุจุงุดุฑุฉ
app.get('/qr', async (req, res) => {
    if (!qrCodeData) {
        return res.send('<h2>โณ ูู ุงูุชุธุงุฑ ุชูููุฏ QR Code ... ุฃุนุฏ ุชุญููู ุงูุตูุญุฉ ุจุนุฏ ูุญุธุงุช</h2>');
    }

    try {
        const qrImage = await qrcode.toDataURL(qrCodeData);
        res.send(`
            <div style="display:flex;justify-content:center;align-items:center;flex-direction:column;height:100vh;">
                <h2>๐ฑ ุงูุณุญ ูุฐุง ุงูููุฏ ูุชูุนูู ุงูุจูุช</h2>
                <img src="${qrImage}" />
            </div>
        `);
    } catch (err) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก QR Code:', err);
        res.status(500).send('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก QR Code');
    }
});

async function startBot() {
    const { state, saveCreds } = await useMultiFileAuthState(AUTH_FOLDER);
    const { version } = await fetchLatestBaileysVersion();

    const sock = makeWASocket({
        auth: state,
        logger: P({ level: 'silent' }),
        version,
    });

    // ุญูุธ ุงูู creds ู keys ุชููุงุฆููุง ุนูุฏ ุฃู ุชุญุฏูุซ
    sock.ev.on('creds.update', saveCreds);

    sock.ev.on('connection.update', ({ connection, lastDisconnect, qr }) => {
        if (qr) {
            qrCodeData = qr;
            console.log(`๐ ุงูุชุญ ูุฐุง ุงูุฑุงุจุท ููุณุญ QR Code:\n`);
            console.log(`${process.env.RAILWAY_STATIC_URL || `http://localhost:${PORT}`}/qr`);
        }

        if (connection === 'open') {
            console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ูุน WhatsApp!');
        } else if (connection === 'close') {
            const reason = new Boom(lastDisconnect?.error)?.output?.statusCode;
            if (reason !== DisconnectReason.loggedOut) {
                console.log('๐ ุฅุนุงุฏุฉ ุงูุงุชุตุงู...');
                startBot();
            } else {
                console.log('๐ช ุชู ุชุณุฌูู ุงูุฎุฑูุฌ. ุฃุนุฏ ุชุดุบูู ุงูุจูุช ููุณุญ ููุฏ ุฌุฏูุฏ.');
            }
        }
    });

    sock.ev.on('messages.upsert', async ({ messages }) => {
        const msg = messages[0];
        if (!msg.message) return;

        const from = msg.key.remoteJid;
        const text = msg.message.conversation || msg.message.extendedTextMessage?.text;

        console.log(`๐ฉ ุฑุณุงูุฉ ูู ${from}: ${text}`);

        if (text?.toLowerCase() === 'jetzt starten') {
            await sock.sendMessage(from, { text: '๐ Hallo! Dein DigiNetz Bot ist jetzt aktiv โ' });
        }
    });
}

startBot();

app.listen(PORT, () => {
    console.log(`๐ DigiNetz Bot lรคuft auf Port ${PORT}`);
    console.log(`๐ ุงูุชุญ ูุฐุง ุงูุฑุงุจุท ููุณุญ QR Code:\n`);
    console.log(`${process.env.RAILWAY_STATIC_URL || `http://localhost:${PORT}`}/qr`);
});
